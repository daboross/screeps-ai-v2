diff --git a/transcrypt/modules/itertools/__javascript__/__init__.mod.js b/transcrypt/modules/itertools/__javascript__/__init__.mod.js
index ef3ca8f..7ca5c7b 100644
--- a/transcrypt/modules/itertools/__javascript__/__init__.mod.js
+++ b/transcrypt/modules/itertools/__javascript__/__init__.mod.js
@@ -4,7 +4,6 @@
             __all__: {
                 __inited__: false,
                 __init__: function (__all__) {
-__pragma__ ('ifdef', '__esv6__')
                     var count = function* (start, step) {
                         if (start == undefined) {
                             start = 0;
@@ -298,18 +297,7 @@ __pragma__ ('ifdef', '__esv6__')
                         recurse (tail, tail.slice (0, 0), r - 1);
                         return list (result);
                     }
-__pragma__ ('else')
-                    var chain = function () {
-                        var args = [] .slice.apply (arguments);
-                        var result = [];
-                        for (var index = 0; index < args.length; index++) {
-                            result = result.concat (args [index]);
-                        }
-                        return list (result);
-                    }
-__pragma__ ('endif')
                     //<all>
-__pragma__ ('ifdef', '__esv6__')
                     __all__.count = count;
                     __all__.cycle = cycle;
                     __all__.repeat = repeat;
@@ -327,9 +315,6 @@ __pragma__ ('ifdef', '__esv6__')
                     __all__.permutations = permutations;
                     __all__.combinations = combinations;
                     __all__.combinations_with_replacement = combinations_with_replacement;
-__pragma__ ('else')
-                    __all__.chain = chain;
-__pragma__ ('endif')
                     //</all>
                 }
             }
diff --git a/transcrypt/modules/org/transcrypt/__javascript__/__builtin__.mod.js b/transcrypt/modules/org/transcrypt/__javascript__/__builtin__.mod.js
index 19c1ffe..9ce2c22 100644
--- a/transcrypt/modules/org/transcrypt/__javascript__/__builtin__.mod.js
+++ b/transcrypt/modules/org/transcrypt/__javascript__/__builtin__.mod.js
@@ -271,19 +271,17 @@ __pragma__ ('endif')
 
     // Repr function uses __repr__ method, then __str__, then toString
     var repr = function (anObject) {
-        try {
+        if (typeof anObject === 'string' || anObject instanceof String) {
+            return String (anObject);
+        } else if (anObject == null) {
+            return 'None';
+        } else if (anObject.__repr__) {
             return anObject.__repr__ ();
-        }
-        catch (exception) {
+        } else if (anObject.__str__) {
+            return anObject.__str__ ();
+        } else {
             try {
-                return anObject.__str__ ();
-            }
-            catch (exception) { // anObject has no __repr__ and no __str__
-                try {
-                    if (anObject == null) {
-                        return 'None'
-                    }
-                    else if (anObject.constructor == Object) {
+                    if (anObject.constructor == Object) {
                         var result = '{';
                         var comma = false;
                         for (var attrib in anObject) {
@@ -315,12 +313,11 @@ __pragma__ ('endif')
                     else {
                         return typeof anObject == 'boolean' ? anObject.toString () .capitalize () : anObject.toString ();
                     }
-                }
-                catch (exception) {
-                    console.log ('ERROR: Could not evaluate repr (<object of type ' + typeof anObject + '>)');
-                    console.log (exception);
-                    return '???';
-                }
+            }
+            catch (exception) {
+                console.log ('ERROR: Could not evaluate repr (<object of type ' + typeof anObject + '>)');
+                console.log (exception);
+                return '???';
             }
         }
     }
@@ -404,7 +401,11 @@ __pragma__ ('endif')
     }
 
     function py_iter (iterable) {                   // Alias for Python's iter function, produces a universal iterator / iterable, usable in Python and JavaScript
-        if (typeof iterable == 'string' || '__iter__' in iterable) {    // JavaScript Array or string or Python iterable (string has no 'in')
+        if (Symbol.iterator in iterable) {                         // It's a JavaScript iterable such as a typed array, but not an iterator
+            var result = iterable [Symbol.iterator] ();                 // Has a next
+            result.__next__ = __pyUseJsNext__;                          // Give it a __next__
+        }
+        else if (typeof iterable == 'string' || '__iter__' in iterable) {    // JavaScript Array or string or Python iterable (string has no 'in')
             var result = iterable.__iter__ ();                          // Iterator has a __next__
             result.next = __jsUsePyNext__;                              // Give it a next
         }
@@ -418,10 +419,6 @@ __pragma__ ('endif')
                 result.__next__ = __pyUseJsNext__;                      // Give it a __next__
             }
         }
-        else if (Symbol.iterator in iterable) {                         // It's a JavaScript iterable such as a typed array, but not an iterator
-            var result = iterable [Symbol.iterator] ();                 // Has a next
-            result.__next__ = __pyUseJsNext__;                          // Give it a __next__
-        }
         else {
             throw IterableError (new Error ()); // No iterator at all
         }
@@ -628,11 +625,7 @@ __pragma__ ('endif')
     // List extensions to Array
 
     function list (iterable) {                                      // All such creators should be callable without new
-__pragma__ ('ifdef', '__esv6__')
         var instance = iterable ? Array.from (iterable) : [];
-__pragma__ ('else')
-        var instance = iterable ? [] .slice.apply (iterable) : [];  // Spread iterable, n.b. array.slice (), so array before dot
-__pragma__ ('endif')
         // Sort is the normal JavaScript sort, Python sort is a non-member function
         return instance;
     }
@@ -667,6 +660,10 @@ __pragma__ ('endif')
             stop = this.length;
         }
 
+        if (step == 1) {
+            return Array.prototype.slice.apply(this, [start, stop])
+        }
+
         var result = list ([]);
         for (var index = start; index < stop; index += step) {
             result.push (this [index]);
@@ -961,16 +958,12 @@ __pragma__ ('endif')
     // String extensions
 
     function str (stringable) {
-        try {
-            return stringable.__str__ ();
-        }
-        catch (exception) {
-            try {
-                return repr (stringable)
-            }
-            catch (exception) {
-                return String (stringable); // No new, so no permanent String object but a primitive in a temporary 'just in time' wrapper
-            }
+        if (stringable instanceof String || typeof stringable === 'string') {
+            return String (stringable); // No new, so no permanent String object but a primitive in a temporary 'just in time' wrapper
+        } else if (stringable.__str__) {
+            return stringable.__str__();
+        } else {
+            return repr (stringable);
         }
     }
     __all__.str = str;
@@ -1054,7 +1047,8 @@ __pragma__ ('endif')
                 }
             });
         });},
-        enumerable: true
+        enumerable: true,
+        configurable: true
     });
 
     String.prototype.isnumeric = function () {
@@ -1284,7 +1278,7 @@ __pragma__ ('endif')
     }
 
     // Python classes, methods and functions are all translated to JavaScript functions
-    Object.defineProperty (Function.prototype, '__setdoc__', {value: __setdoc__, enumerable: false});
+    Object.defineProperty (Function.prototype, '__setdoc__', {value: __setdoc__, enumerable: false, configurable: true});
 
     // General operator overloading, only the ones that make most sense in matrix and complex operations
 
diff --git a/transcrypt/modules/org/transcrypt/__standard__.py b/transcrypt/modules/org/transcrypt/__standard__.py
index 4f26fed..7dc63bc 100644
--- a/transcrypt/modules/org/transcrypt/__standard__.py
+++ b/transcrypt/modules/org/transcrypt/__standard__.py
@@ -13,9 +13,9 @@ class Exception:
     __pragma__ ('kwargs')
     def __init__ (self, *args, **kwargs):
         self.__args__ = args
-        try:
+        if kwargs.error != None:
             self.stack = kwargs.error.stack # Integrate with JavaScript Error object
-        except:
+        else:
             self.stack = 'No stack trace available'
     __pragma__ ('nokwargs')
         
@@ -181,6 +181,19 @@ class complex:
 __pragma__ ('endif')
 
 class __Terminal__:
+    def __init__ (self):
+        pass
+
+    def print (self, *args, sep = ' '):
+        length = len (args)
+        if length < 1:
+            console.log ()
+        elif length == 1:
+            console.log (args[0])
+        else:
+            console.log (sep.join ([str(arg) for arg in args]))
+
+class __OldTerminal__:
     '''
     Printing to either the console or to html happens async, but is blocked by calling window.prompt.
     So while all input and print statements are encountered in normal order, the print's exit immediately without yet having actually printed
diff --git a/transcrypt/modules/org/transcrypt/compiler.py b/transcrypt/modules/org/transcrypt/compiler.py
index 4bf90f0..11ff058 100644
--- a/transcrypt/modules/org/transcrypt/compiler.py
+++ b/transcrypt/modules/org/transcrypt/compiler.py
@@ -1593,9 +1593,18 @@ class Generator (ast.NodeVisitor):
             if index:
                 self.emit (' && ')
             
-            if type (op) in (ast.In, ast.NotIn) or (self.allowOperatorOverloading and type (op) in (
+            if type (op) in (ast.In, ast.NotIn):
+                if type (op) == ast.In:
+                    self.emit ('(')
+                else:
+                    self.emit ('!(')
+                self.visitSubExpr (node, left)
+                self.emit (' in ')
+                self.visitSubExpr (node, right)
+                self.emit (')')
+            elif self.allowOperatorOverloading and type (op) in (
                 ast.Eq, ast.NotEq, ast.Lt, ast.LtE, ast.Gt, ast.GtE
-            )):
+            ):
                 self.emit ('{} ('.format (self.filterId (
                     '__in__' if type (op) == ast.In else
                     '!__in__' if type (op) == ast.NotIn else
@@ -2504,4 +2513,4 @@ class Generator (ast.NodeVisitor):
         self.getScope (ast.FunctionDef) .containsYield = True
         self.emit ('yield* ')
         self.visit (node.value)
-    
\ No newline at end of file
+
